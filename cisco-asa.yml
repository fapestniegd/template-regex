---
################################################################################
# Here is where we put the regular expressions for repeated tokens
# I have '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' for an IP address, 
# and just \S+ for others, but you can make them as specific or generic as you
# like, these will be pasted in via Template::Toolkit where ever the [% IP %]
# tag is found in the log templates, this makes what would be an impossible to
# manage regular expression a managable string
# Do not use parenthesis to return $1, $2, $3, etc in these or it will break
# the module, as it does this for you based on [% TAGS %]
################################################################################
regex_tpl:
  ACCESS_GROUP: \S+
  ASA_CODE: '\%ASA-[0-9]+-[0-9]+:'
  CIPHER: RC4-SHA|AES128-SHA|AES256-SHA|DES-CBC3-SHA|RC4-MD5|RC4-SHA|DES-CBC3-SHA|DES-CBC-SHA|EXP-RC4-MD5|EXP-RC2-CBC-MD5|EDH-DSS-DES-CBC3-SHA|EDH-DSS-DES-CBC-SHA
  DATE: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
  # note we don't need parenthesis here becuase all tags are parenthesis-wrapped before being evaluated. 
  DIRECTION: inbound|outbound
  DURATION: \S+
  FTP_FILE: \S+
  FTP_USER: \S+
  HEX: 0x\S+
  HOSTNAME: \S+
  IFACE: \S+
  IFACE_IP: '[^:]+:[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'
  IFACE_IP_PORT: '[^:]+:[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/[0-9]+'
  IFACE_IP_PORT_P: '[^:]+:[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/[0-9]+\s+\([^\)]*\)'
  IFACE_IP_SVC: '[^:]+:[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/\S+'
  INT: \d+
  IP: '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'
  IPV6: '[0-9a-f:]+'
  IPSEC_STAGE: .*
  IP_PORT: '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/[0-9]+'
  PORT: '[0-9]+'
  REASON: TCP FINs|TCP Reset-I|TCP Reset-O|SYN Timeout|FIN Timeout|looping-address|Parent flow is closed|Connection timeout
  SESSION: '[0-9]+'
  TCP_FLAG: RST|ACK|RST ACK|PSH ACK|SYN ACK|FIN ACK|FIN PSH ACK
  TIME: '[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{6}|[0-9]{2}:[0-9]{2}:[0-9]{2}'
  TRANSPORT: TCP|UDP|ICMP
  TUNNEL_GROUP: \S+
  TYPE_CODE: '\(type \d+, code \d+\)'
  TZ_OFF: '[+\-][0-9]{2}:[0-9]{2}'
  USER: '\S+'
  USER_P: \(\S+\)
  ANYTHING: '.*'
################################################################################
# Here we have nested log substrings and their names, the logic being that 
# you can match the first part of a line, and then iterate to match the 
# remainder of the line. What you should get out of the function is the 
# dot-delimited name of the path it took
# ( e.g. cisco_asa.ipsec_message.constr_blank_hash ) a list of patterns matched
# by each of the (expanded) templates
# since cisco_ass.local_host_teardown "expands" to:
# '[% DATE %]T[% TIME %][% TZ_OFF %] [% HOSTNAME %] [% ASA_CODE %] Teardown local-host [% IFACE_IP %] duration [% DURATION %]'
# There would be a list of 7 elements of the 7 patterns matched by [% TAGS %]
# if you need finer resolution into the tag, break it out into smaller tags
# ( e.g. [% IP %] can become [% INT %]\.[% INT %]\.[% INT %]\.[% INT %] )
#
# The reaoning behind this is that you can triggre a function on cisco_asa.local_host_buildup,
# and pass it the list of 6 patterns that matched as arguments 
################################################################################
log_tpl:
 - name: cisco_asa
   regex: '[% DATE %]T[% TIME %][% TZ_OFF %] [% HOSTNAME %] [% ASA_CODE %] '
   remainder: 
    - name: local_host_buildup
      regex: 'Built local-host [% IFACE_IP %]'
    - name: local_host_teardown
      regex: 'Teardown local-host [% IFACE_IP %] duration [% DURATION %]'
    - name: udp_permitted
      regex: 'UDP access permitted from [% IP_PORT %] to [% IFACE_IP_SVC %]'
    - name: session_buildup
      regex:  'Built [% DIRECTION %] [% TRANSPORT %] connection [% SESSION %] for [% IFACE_IP_PORT_P %] to [% IFACE_IP_PORT_P %]'
    - name: session_buildup_vpn
      regex: 'Built [% DIRECTION %] [% TRANSPORT %] connection [% SESSION %] for [% IFACE_IP_PORT_P %] to [% IFACE_IP_PORT_P %] [% USER_P %]'
    - name: session_teardown_vpn
      regex: 'Teardown UDP connection [% SESSION %] for [% IFACE_IP_PORT %] to [% IFACE_IP_PORT %] duration [% DURATION %] bytes'
    - name: session_teardown
      regex: 'Teardown TCP connection [% SESSION %] for [% IFACE_IP_PORT %] to [% IFACE_IP_PORT %] duration [% DURATION %] bytes [% INT %] [% REASON %]'
    - name: icmp_build_laddr 
      regex: 'Built [% DIRECTION %] ICMP connection for faddr [% IP_PORT %] laddr [% IP_PORT %]'
    - name: icmp_build_gaddr
      regex: 'Built [% DIRECTION %] ICMP connection for faddr [% IP_PORT %] gaddr [% IP_PORT %]'
    - name: icmp_build_gaddr_laddr
      regex: 'Built [% DIRECTION %] ICMP connection for faddr [% IP_PORT %] gaddr [% IP_PORT %] laddr [% IP_PORT %]'
    - name: icmp_tear_laddr
      regex: 'Teardown ICMP connection for faddr [% IP_PORT %] laddr [% IP_PORT %]'
    - name: icmp_tear_gaddr
      regex: 'Teardown ICMP connection for faddr [% IP_PORT %] gaddr [% IP_PORT %]'
    - name: icmp_tear_gaddr_laddr
      regex: 'Teardown ICMP connection for faddr [% IP_PORT %] gaddr [% IP_PORT %] laddr [% IP_PORT %]'
    - name: dynamic_build
      regex: 'Built dynamic [% TRANSPORT %] translation from [% IFACE_IP_PORT %] to [% IFACE_IP_PORT %]'
    - name: dynamic_translation_build
      regex: 'Built dynamic translation from [% IFACE_IP_PORT %] to [% IFACE_IP_PORT %]'
    - name: dynamic_tear
      regex: 'Teardown dynamic [% TRANSPORT %] translation from [% IFACE_IP_PORT %] to [% IFACE_IP_PORT %] duration [% DURATION %]'
    - name: portmap_build
      regex: 'portmap translation creation failed for udp src [% IFACE_IP_PORT %] dst [% IFACE_IP_PORT %]'
    - name: ipsec_message
      regex: 'Group = [% TUNNEL_GROUP %], IP = [% IP %], [% IPSEC_STAGE %]'
      remainder:
        - name: constr_blank_hash
          regex: 'constructing blank hash payloa'
        - name: constr_ipsec_delete
          regex: 'constructing IPSec delete payload'
        - name: constr_ipsec_nonce
          regex: 'constructing IPSec nonce payload'
        - name: constr_ipsec_sa
          regex: 'constructing IPSec SA payload'
        - name: constr_pfs_ke
          regex: 'constructing pfs ke payload'
        - name: constr_proxy_id
          regex: 'constructing proxy ID'
        - name: constr_proxy_id
          regex: 'constructing qm hash payload'
        - name: ike_init_phase2
          regex: 'IKE Initiator: New Phase 2, Intf production, IKE Peer [% IP %]  local Proxy Address [% IP %], remote Proxy Address [% IP %],  Crypto map \(vpn\)'
        - name: ike_init_start_qm
          regex: 'IKE Initiator starting QM: msg id = '
        - name: ike_init_sending_1st_qm
          regex: 'IKE Initiator sending 1st QM pkt: msg id = '
        - name: ike_got_spi
          regex: 'IKE got SPI from key engine: SPI = [% HEX %]'
        - name: ike_delete_sa
          regex: 'IKE Deleting SA: Remote Proxy [% IP %], Local Proxy [% IP %]'
        - name: oakley_begin_quick
          regex: 'Oakley begin quick mode'
        - name: oakley_cnstr_quick
          regex: 'oakley constucting quick mode'
        - name: processsing_hash
          regex: 'processing hash payload'
        - name: processsing_notify
          regex: 'processing notify payload'
        - name: qm_fsm_error
          regex: 'QM FSM error \(P2 struct &[% HEX %], mess id [% HEX %]\)'
        - name: recieve_keep_alive
          regex: 'Received keep-alive of type DPD R-U-THERE'
        - name: recieve_non_routine_notify
          regex: 'Received non-routine Notify message: Invalid ID info \([% INT %]\)'
        - name: remove_peer_fail
          regex: 'Removing peer from correlator table failed, no match'
        - name: send_keep_alive_ruthereack
          regex: 'Sending keep-alive of type DPD R-U-THERE-ACK'
        - name: send_keep_alive_ruthere
          regex: 'Sending keep-alive of type DPD R-U-THERE'
        - name: send_delete_reason
          regex: 'sending delete/delete with reason message'
        - name: transmit_proxy_id
          regex: 'Transmitting Proxy Id:#[% INT %]  Local subnet:  [% IP %]  mask [% IP %] Protocol [% INT %]  Port [% INT %]#[% INT %]  Remote subnet: [% IP %]  Mask [% IP %] Protocol [% INT %]  Port [% INT %]'
        - name: everything_else
          regex: '.*'
    - name: ipsec_ip_message
      regex: 'IP = [% IP %], '
      remainder: 
        - name: ike_decode_recieve
          regex: 'IKE_DECODE RECEIVED Message'
        - name: ike_decode_send
          regex: 'IKE_DECODE SENDING Message'
        - name: no_matching_sa
          regex: 'Received encrypted packet with no matching SA, dropping'
        - name: everything_else
          regex: '.*'
    - name: pitcher_key_aquire
      regex: 'Pitcher: received a key acquire message, spi [% HEX %]'
    - name: pitcher_key_delete
      regex: 'Pitcher: received key delete msg, spi [% HEX %]'
    - name: ike_no_policy
      regex: 'IKE Initiator unable to find policy: Intf [% IFACE %], Src: [% IP %], Dst: [% IP %]'
    - name: sa_created
      regex: 'IPSEC: An outbound LAN-to-LAN SA .SPI= [% HEX %]. between [% IP %] and [% IP %] .user= [% TUNNEL_GROUP %]. has been created.'
    - name: sa_deleted
      regex: 'IPSEC: An outbound LAN-to-LAN SA .SPI= [% HEX %]. between [% IP %] and [% IP %] .user= [% TUNNEL_GROUP %]. has been deleted.'
    - name: deny_tcp
      regex: 'Deny tcp src [% IFACE_IP_PORT %] dst [% IFACE_IP_PORT %] by access-group [% ACCESS_GROUP %] \[[% HEX %], [% HEX %]\]'
    - name: deny_tcp_no_conn
      regex: 'Deny TCP \(no connection\) from [% IP_PORT %] to [% IP_PORT %] flags [% TCP_FLAG %] on interface [% IFACE %]'
    - name: discard_tcp
      regex: 'TCP request discarded from [% IP_PORT %] to [% IFACE_IP_PORT %]'
    - name: discard_udp_iface
      regex: 'UDP request discarded from [% IFACE_IP_PORT %] to [% IFACE_IP_PORT %]'
    - name: discard_udp_ip
      regex: 'UDP request discarded from [% IP_PORT %] to [% IFACE_IP_PORT %]'
    - name: deny_udp
      regex: 'Deny udp src [% IFACE_IP_PORT %] dst [% IFACE_IP_PORT %] by access-group [% ACCESS_GROUP %] \[[% HEX %], [% HEX %]\]'
    - name: deny_icmp
      regex: 'Deny icmp src [% IFACE_IP %] dst [% IFACE_IP %] [% TYPE_CODE %] by access-group [% ACCESS_GROUP %] \[[% HEX %], [% HEX %]\]'
    - name: deny_land_attack
      regex: 'Deny IP due to Land Attack from [% IP %] to [% IP %]'
    - name: icmp_no_conn
      regex: 'No matching connection for ICMP error message: icmp src [% IFACE_IP %] dst [% IFACE_IP %] [% TYPE_CODE %] on [% IFACE %] interface.  Original IP payload: udp src [% IP_PORT %] dst [% IP_PORT %]'
    - name: esmtp_size_violation
      regex: 'Detected ESMTP size violation from [% IFACE_IP_PORT %] to [% IFACE_IP_PORT %]; declared size is: [% INT %], actual size is [% INT %]'
    - name: ftp
      regex: 'FTP connection from [% IFACE_IP_PORT %] to [% IFACE_IP_PORT %], user [% FTP_USER %] '
      remainder: 
        - name: retrieved_file
          regex: 'Retrieved file [% FTP_FILE %]'
        - name: stored_file
          regex: 'Stored file [% FTP_FILE %]'
    - name: ids_drop_rate_exceeded_scanning
      regex: '\[ Scanning\] drop rate-[% INT %] exceeded. Current burst rate is [% INT %] per second, max configured rate is [% INT %]; Current average rate is [% INT %] per second, max configured rate is [% INT %]; Cumulative total count is [% INT %]'
    - name: ids_drop_rate_exceeded_ip
      regex: ' \[   [% IP %]] drop rate-[% INT %] exceeded. Current burst rate is [% INT %] per second, max configured rate is [% INT %]; Current average rate is [% INT %] per second, max configured rate is [% INT %]; Cumulative total count is [% INT %]'
    - name: cleared_tcp_urgent
      regex: 'Cleared TCP urgent flag from [% IFACE_IP_PORT %] to [% IFACE_IP_PORT %]'
    - name: nat_t
      regex: 'NAT-T keepalive received from [% IP %]/[% PORT %] to [% IFACE %]:[% IP %]/[% PORT %]'
      remainder:
        - name: remainder
          regex: '[% ANYTHING %]'
    - name: udp_route_fail
      regex: 'Routing failed to locate next hop for UDP from [% IFACE %]:[% IP %]/[% PORT %] to [% IFACE %]:[% IP %]/[% PORT %]'
      remainder:
        - name: remainder
          regex: '[% ANYTHING %]'
    - name: udp_egress_iface_fail
      regex: 'Failed to locate egress interface for UDP from [% IFACE %]:[% IPV6 %]/[% PORT %] to [% IPV6 %]/[% PORT %]'
      remainder:
        - name: remainder
          regex: '[% ANYTHING %]'
    - name: aaa
      regex: 'AAA '
      remainder:
        - name: user_auth_success
          regex: 'user authentication Successful : .* : user = [% USER %]'
        - name: transaction_status_accept
          regex: 'transaction status ACCEPT : user = [% USER %]'
        - name: auth_server_inaccesable
          regex: 'authentication server not accessible : server =\s+[% IP %] : user = [% USER %]'
        - name: remainder
          regex: '[% ANYTHING %]'
    - name: login_permitted
      regex: 'Login permitted from [% IP_PORT %] to [% IFACE_IP_PORT %] for user "[% USER %]"'
      remainder:
        - name: remainder
          regex: '[% ANYTHING %]'
    - name: ssh_session_normal_termination
      regex: 'SSH session from [% IP %] on interface [% IFACE %] for user "[% USER %]" terminated normally'
      remainder:
        - name: remainder
          regex: '[% ANYTHING %]'
    - name: aaa_failback_local
      regex: 'Attempting AAA Fallback method LOCAL for Authentication request for user [% USER %] : Auth-server group .* unreachable'
      remainder:
        - name: remainder
          regex: '[% ANYTHING %]'
    - name: user
      regex: 'User '
      remainder:
        - name: auth_success
          regex: 'authentication succeeded: Uname: [% USER %]'
        - name: priv_level_change
          regex: 'priv level changed: Uname: [% USER %] From: [% INT %] To: [% INT %]'
        - name: logout
          regex: 'logged out: Uname: [% USER %]'
        - name: executed_cmd
          regex: '.[% USER %]. executed cmd: [% ANYTHING %]'
        - name: executed_the_cmd
          regex: '.[% USER %]. executed the .[% ANYTHING %]. command.'
        - name: remainder
          regex: '[% ANYTHING %]'
    - name: cipher
      regex: 'Cipher.[% INT %]. : [% CIPHER %]'
    - name: remainder
      regex: '[% ANYTHING %]'
 - name: cisco_asa_code_matched
   regex: '[% DATE %]T[% TIME %][% TZ_OFF %] [% HOSTNAME %] [% ASA_CODE %]'
 - name: cisco_asa_host_matched
   regex: '[% DATE %]T[% TIME %][% TZ_OFF %] [% HOSTNAME %]'
 - name: cisco_asa_tzoff_matched
   regex: '[% DATE %]T[% TIME %][% TZ_OFF %]'
 - name: cisco_asa_time_matched
   regex: '[% DATE %]T[% TIME %]'
 - name: cisco_asa_date_matched
   regex: '[% DATE %]' 
 - name: remainder
   regex: '[% ANYTHING %]'
